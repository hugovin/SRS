//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace CoreServices.DataTransferObjects
{
    
    [DataContract(Name = "countryDto", Namespace = "" , IsReference = true) ]
    public partial class countryDto
    {
         #region Primitive Properties
    	
    	[DataMember]
        public virtual int country_id
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string country_name
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<System.DateTime> created_date
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<System.DateTime> modified_date
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string modified_by
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<sbyte> is_active
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<buildingDto> buildings
        {
            get
            {
                if (_buildings == null)
                {
                    var newCollection = new FixupCollection<buildingDto>();
                    newCollection.CollectionChanged += Fixupbuildings;
                    _buildings = newCollection;
                }
                return _buildings;
            }
            set
            {
                if (!ReferenceEquals(_buildings, value))
                {
                    var previousValue = _buildings as FixupCollection<buildingDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupbuildings;
                    }
                    _buildings = value;
                    var newValue = value as FixupCollection<buildingDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupbuildings;
                    }
                }
            }
        }
        private ICollection<buildingDto> _buildings;

        #endregion
        #region Association Fixup
    
        private void Fixupbuildings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (buildingDto item in e.NewItems)
                {
                    item.country = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (buildingDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.country, this))
                    {
                        item.country = null;
                    }
                }
            }
        }

        #endregion
    }
}
