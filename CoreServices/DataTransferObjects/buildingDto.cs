//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Runtime.Serialization;

namespace CoreServices.DataTransferObjects
{
    
    [DataContract(Name = "buildingDto", Namespace = "" , IsReference = true) ]
    public partial class buildingDto
    {
         #region Primitive Properties
    	
    	[DataMember]
        public virtual int building_id
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual int country_id
        {
     
    		
            get { return _country_id; }
            set
            {
                if (_country_id != value)
                {
                    if (country != null && country.country_id != value)
                    {
                        country = null;
                    }
                    _country_id = value;
                }
            }
        }
        private int _country_id;
    	
    	[DataMember]
        public virtual string building_name
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string bulding_address
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual string modified_by
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<System.DateTime> created_date
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<System.DateTime> modified_date
        {
            get;
            set;
        }
    	
    	[DataMember]
        public virtual Nullable<sbyte> is_active
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<roomDto> rooms
        {
            get
            {
                if (_rooms == null)
                {
                    var newCollection = new FixupCollection<roomDto>();
                    newCollection.CollectionChanged += Fixuprooms;
                    _rooms = newCollection;
                }
                return _rooms;
            }
            set
            {
                if (!ReferenceEquals(_rooms, value))
                {
                    var previousValue = _rooms as FixupCollection<roomDto>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuprooms;
                    }
                    _rooms = value;
                    var newValue = value as FixupCollection<roomDto>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuprooms;
                    }
                }
            }
        }
        private ICollection<roomDto> _rooms;
    
    	[DataMember]
        public virtual countryDto country
        {
            get { return _country; }
            set
            {
                if (!ReferenceEquals(_country, value))
                {
                    var previousValue = _country;
                    _country = value;
                    Fixupcountry(previousValue);
                }
            }
        }
        private countryDto _country;

        #endregion
        #region Association Fixup
    
        private void Fixupcountry(countryDto previousValue)
        {
            if (previousValue != null && previousValue.buildings.Contains(this))
            {
                previousValue.buildings.Remove(this);
            }
    
            if (country != null)
            {
                if (!country.buildings.Contains(this))
                {
                    country.buildings.Add(this);
                }
                if (country_id != country.country_id)
                {
                    country_id = country.country_id;
                }
            }
        }
    
        private void Fixuprooms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (roomDto item in e.NewItems)
                {
                    item.building = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (roomDto item in e.OldItems)
                {
                    if (ReferenceEquals(item.building, this))
                    {
                        item.building = null;
                    }
                }
            }
        }

        #endregion
    }
}
